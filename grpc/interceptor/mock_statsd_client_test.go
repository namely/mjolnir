package interceptor

import mock "github.com/stretchr/testify/mock"
import time "time"

// MockStatsdClient is an autogenerated mock type for the StatsdClient type
type MockStatsdClient struct {
	mock.Mock
}

// Count provides a mock function with given fields: name, value, tags, rate
func (_m *MockStatsdClient) Count(name string, value int64, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Decr provides a mock function with given fields: name, tags, rate
func (_m *MockStatsdClient) Decr(name string, tags []string, rate float64) error {
	ret := _m.Called(name, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, float64) error); ok {
		r0 = rf(name, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Gauge provides a mock function with given fields: name, value, tags, rate
func (_m *MockStatsdClient) Gauge(name string, value float64, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Histogram provides a mock function with given fields: name, value, tags, rate
func (_m *MockStatsdClient) Histogram(name string, value float64, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Incr provides a mock function with given fields: name, tags, rate
func (_m *MockStatsdClient) Incr(name string, tags []string, rate float64) error {
	ret := _m.Called(name, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, float64) error); ok {
		r0 = rf(name, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Set provides a mock function with given fields: name, value, tags, rate
func (_m *MockStatsdClient) Set(name string, value string, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SimpleEvent provides a mock function with given fields: title, text
func (_m *MockStatsdClient) SimpleEvent(title string, text string) error {
	ret := _m.Called(title, text)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(title, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TimeInMilliseconds provides a mock function with given fields: name, value, tags, rate
func (_m *MockStatsdClient) TimeInMilliseconds(name string, value float64, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, float64, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Timing provides a mock function with given fields: name, value, tags, rate
func (_m *MockStatsdClient) Timing(name string, value time.Duration, tags []string, rate float64) error {
	ret := _m.Called(name, value, tags, rate)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration, []string, float64) error); ok {
		r0 = rf(name, value, tags, rate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

var _ StatsdClient = (*MockStatsdClient)(nil)
